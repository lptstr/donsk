#!/bin/bash

source ./config

name="donsk"
html1='<!DOCTYPE html><html lang=en><head><link href="'
html2="\" rel=icon type=\"image/png\"><title>${site_name}</title><meta name=viewport content=\"width=device-width\"><style>"
html3='</style>'
html4='</head><body><main>{{content}}</main></body></html>'

style='a{background:linear-gradient(to bottom,#cdcdcd,#cdcdcd) 50% calc(100% - 2px)/50% 2px no-repeat;color:#333;margin:-1px;text-decoration:none!important;-webkit-transition:all .35s ease-in-out;transition:all .35s ease-in-out}a:focus,a:hover{background-image:linear-gradient(to bottom,#777,#777);background-size:100% 3px;color:#111;-webkit-transition:all .35s ease-in-out!important;transition:all .35s ease-in-out!important}body{overflow-y:scroll;font-family:sans-serif}img,main{display:block;margin:25px auto}main{padding:20px;max-width:600px;line-height:1.6;word-wrap:break-word}img{max-width:100%}pre>code{display:block;padding:20px;white-space:pre-line}code{background:#eee;padding:2px}blockquote{border-left:7px solid #ddd;padding-left:14px;color:#666;margin:0}h1,h2,h3,h4{line-height:1.2}h1{font-family:monospace}'
favicon=''
invisitext='<link rel="stylesheet" href="http://invisi-text.surge.sh/cdn/production/0.2.0/invisi-text.min.css" />'

template="${html1}${favicon}${html2}${style}${html3}${invisitext}${html4}"

if [[ -z $1 ]]; then
    rm -rf _website
    printf "[${name}] cleaning out _website/*\n"
fi

mkdir -p _website/images
mkdir -p _website/blog

for md in _content/*.md; do
    file_name=${md##*/}
    printf "[${name}] processing markdown file ${md}\n"

    [[ $file_name != index.md ]] &&
        home="<a href='/'>Home</a>"


    minify --type html \
        <<< "${template/'{{content}}'/${home}$(pandoc "$md")}" \
        > "_website/${file_name/%.md/.html}"

    home=
done

for folder in $folders; do 
    if [[ ! -d "_website/$folder" ]]; then
        mkdir -p "_website/$folder"
    fi
    
    for md in _content/$folder/*.md; do
        file_name=${md##*/}
        printf "[${name}] processing markdown file ${md} in directory ${folder}\n"

        home="<a href='/'>Home</a>"

        minify --type html \
            <<< "${template/'{{content}}'/${home}$(pandoc "$md")}" \
            > "_website/$folder/${file_name/%.md/.html}"

        home=
    done
done

for md in _content/_posts/*.md; do
    file_name=${md##*/}
    printf "[${name}] processing markdown post ${md}\n"

    home="<a href='/'>Home</a>"

    minify --type html \
        <<< "${template/'{{content}}'/${home}$(pandoc "$md")}" \
        > "_website/blog/${file_name/%.md/.html}"

    home=
done


[[ $1 ]] &&
    exit

cd _website/images || exit

png_flags=(--speed 1 --skip-if-larger --strip -f --verbose --output)

for img in ../../_content/_images/*.{jpg,png}; do (
    file_name=${img##*/}
    suffix=${file_name/*.}
    
    printf "[${name}] processing image ${img}\n"
    x2=${file_name/%.${suffix}/-2x.${suffix}}

    convert "$img" -resize 600x\>  "$file_name"
    convert "$img" -resize 1200x\> "$x2"

    case $suffix in
        jpg) jpegoptim -s "$file_name" "$x2" ;;
        png)
            pngquant "$file_name" "${png_flags[@]}" "$file_name"
            pngquant "$x2" "${png_flags[@]}" "$x2"
        ;;
    esac

    img2webp -lossy -q 90 "$file_name" -o "${file_name%.${suffix}}.webp"
    img2webp -lossy -q 90 "$x2" -o "${x2%.${suffix}}.webp"
) & done

cd ../..

for file in _content/_files/*; do (
  printf "[${name}] moving static file $file to _site/\n"
  cp -r "$file" _website/
) & done

wait
